// @generated by protoc-gen-es v0.3.0 with parameter "target=ts"
// @generated from file protobuf/core.proto (package core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum core.AppStatus
 */
export enum AppStatus {
  /**
   * @generated from enum value: USER_STORIES = 0;
   */
  USER_STORIES = 0,

  /**
   * @generated from enum value: DESIGN = 1;
   */
  DESIGN = 1,

  /**
   * @generated from enum value: DEVELOPMENT = 2;
   */
  DEVELOPMENT = 2,

  /**
   * @generated from enum value: RELEASE = 3;
   */
  RELEASE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(AppStatus)
proto3.util.setEnumType(AppStatus, "core.AppStatus", [
  { no: 0, name: "USER_STORIES" },
  { no: 1, name: "DESIGN" },
  { no: 2, name: "DEVELOPMENT" },
  { no: 3, name: "RELEASE" },
]);

/**
 * @generated from enum core.UserRole
 */
export enum UserRole {
  /**
   * @generated from enum value: ADMIN = 0;
   */
  ADMIN = 0,

  /**
   * @generated from enum value: USER = 1;
   */
  USER = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(UserRole)
proto3.util.setEnumType(UserRole, "core.UserRole", [
  { no: 0, name: "ADMIN" },
  { no: 1, name: "USER" },
]);

/**
 * @generated from enum core.UserRequestStatus
 */
export enum UserRequestStatus {
  /**
   * @generated from enum value: IDLE = 0;
   */
  IDLE = 0,

  /**
   * @generated from enum value: REQUESTED = 1;
   */
  REQUESTED = 1,

  /**
   * @generated from enum value: ACCEPTED = 2;
   */
  ACCEPTED = 2,

  /**
   * @generated from enum value: UPDATE_REQUESTED = 3;
   */
  UPDATE_REQUESTED = 3,

  /**
   * @generated from enum value: UPDATE_ACCEPTED = 4;
   */
  UPDATE_ACCEPTED = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(UserRequestStatus)
proto3.util.setEnumType(UserRequestStatus, "core.UserRequestStatus", [
  { no: 0, name: "IDLE" },
  { no: 1, name: "REQUESTED" },
  { no: 2, name: "ACCEPTED" },
  { no: 3, name: "UPDATE_REQUESTED" },
  { no: 4, name: "UPDATE_ACCEPTED" },
]);

/**
 * @generated from message core.Link
 */
export class Link extends Message<Link> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  constructor(data?: PartialMessage<Link>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.Link";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Link {
    return new Link().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Link {
    return new Link().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Link {
    return new Link().fromJsonString(jsonString, options);
  }

  static equals(a: Link | PlainMessage<Link> | undefined, b: Link | PlainMessage<Link> | undefined): boolean {
    return proto3.util.equals(Link, a, b);
  }
}

/**
 * @generated from message core.Image
 */
export class Image extends Message<Image> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  constructor(data?: PartialMessage<Image>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.Image";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Image {
    return new Image().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Image {
    return new Image().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Image {
    return new Image().fromJsonString(jsonString, options);
  }

  static equals(a: Image | PlainMessage<Image> | undefined, b: Image | PlainMessage<Image> | undefined): boolean {
    return proto3.util.equals(Image, a, b);
  }
}

/**
 * @generated from message core.App
 */
export class App extends Message<App> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string created_at = 2;
   */
  createdAt = "";

  /**
   * @generated from field: string updated_at = 3;
   */
  updatedAt = "";

  /**
   * @generated from field: string user_id = 4;
   */
  userId = "";

  /**
   * @generated from field: string name = 5;
   */
  name = "";

  /**
   * @generated from field: core.AppStatus status = 6;
   */
  status = AppStatus.USER_STORIES;

  /**
   * @generated from field: repeated core.Link links = 7;
   */
  links: Link[] = [];

  /**
   * @generated from field: string avatar_image = 8;
   */
  avatarImage = "";

  /**
   * @generated from field: repeated string cover_images = 9;
   */
  coverImages: string[] = [];

  constructor(data?: PartialMessage<App>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.App";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(AppStatus) },
    { no: 7, name: "links", kind: "message", T: Link, repeated: true },
    { no: 8, name: "avatar_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "cover_images", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): App {
    return new App().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): App {
    return new App().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): App {
    return new App().fromJsonString(jsonString, options);
  }

  static equals(a: App | PlainMessage<App> | undefined, b: App | PlainMessage<App> | undefined): boolean {
    return proto3.util.equals(App, a, b);
  }
}

/**
 * @generated from message core.Apps
 */
export class Apps extends Message<Apps> {
  /**
   * @generated from field: repeated core.App apps = 1;
   */
  apps: App[] = [];

  constructor(data?: PartialMessage<Apps>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.Apps";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apps", kind: "message", T: App, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Apps {
    return new Apps().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Apps {
    return new Apps().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Apps {
    return new Apps().fromJsonString(jsonString, options);
  }

  static equals(a: Apps | PlainMessage<Apps> | undefined, b: Apps | PlainMessage<Apps> | undefined): boolean {
    return proto3.util.equals(Apps, a, b);
  }
}

/**
 * @generated from message core.Location
 */
export class Location extends Message<Location> {
  /**
   * @generated from field: string longitude = 1;
   */
  longitude = "";

  /**
   * @generated from field: string latitude = 2;
   */
  latitude = "";

  constructor(data?: PartialMessage<Location>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.Location";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "longitude", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "latitude", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Location {
    return new Location().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Location {
    return new Location().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Location {
    return new Location().fromJsonString(jsonString, options);
  }

  static equals(a: Location | PlainMessage<Location> | undefined, b: Location | PlainMessage<Location> | undefined): boolean {
    return proto3.util.equals(Location, a, b);
  }
}

/**
 * @generated from message core.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string created_at = 2;
   */
  createdAt = "";

  /**
   * @generated from field: string supabase_id = 3;
   */
  supabaseId = "";

  /**
   * @generated from field: core.UserRole role = 4;
   */
  role = UserRole.ADMIN;

  /**
   * @generated from field: string company = 5;
   */
  company = "";

  /**
   * @generated from field: string email = 6;
   */
  email = "";

  /**
   * @generated from field: string phone_number = 7;
   */
  phoneNumber = "";

  /**
   * @generated from field: core.Location location = 8;
   */
  location?: Location;

  /**
   * @generated from field: string language = 9;
   */
  language = "";

  /**
   * @generated from field: core.UserRequestStatus request_status = 10;
   */
  requestStatus = UserRequestStatus.IDLE;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "supabase_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role", kind: "enum", T: proto3.getEnumType(UserRole) },
    { no: 5, name: "company", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "location", kind: "message", T: Location },
    { no: 9, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "request_status", kind: "enum", T: proto3.getEnumType(UserRequestStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message core.Users
 */
export class Users extends Message<Users> {
  /**
   * @generated from field: repeated core.User users = 1;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<Users>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.Users";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Users {
    return new Users().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Users {
    return new Users().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Users {
    return new Users().fromJsonString(jsonString, options);
  }

  static equals(a: Users | PlainMessage<Users> | undefined, b: Users | PlainMessage<Users> | undefined): boolean {
    return proto3.util.equals(Users, a, b);
  }
}

/**
 * @generated from message core.GettingStartedRequest
 */
export class GettingStartedRequest extends Message<GettingStartedRequest> {
  /**
   * @generated from field: string company = 1;
   */
  company = "";

  /**
   * @generated from field: string phone_number = 2;
   */
  phoneNumber = "";

  /**
   * @generated from field: string comment = 3;
   */
  comment = "";

  constructor(data?: PartialMessage<GettingStartedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.GettingStartedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "company", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GettingStartedRequest {
    return new GettingStartedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GettingStartedRequest {
    return new GettingStartedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GettingStartedRequest {
    return new GettingStartedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GettingStartedRequest | PlainMessage<GettingStartedRequest> | undefined, b: GettingStartedRequest | PlainMessage<GettingStartedRequest> | undefined): boolean {
    return proto3.util.equals(GettingStartedRequest, a, b);
  }
}

