/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.6
 * source: core.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace core {
    export enum AppStatus {
        USER_STORIES = 0,
        DESIGN = 1,
        DEVELOPMENT = 2,
        RELEASE = 3
    }
    export enum ImageType {
        PROFILE = 0,
        COVER = 1
    }
    export enum UserRole {
        ADMIN = 0,
        USER = 1
    }
    export enum UserRequestStatus {
        IDLE = 0,
        REQUESTED = 1,
        ACCEPTED = 2,
        UPDATE_REQUESTED = 3,
        UPDATE_ACCEPTED = 4
    }
    export class Product extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): Product {
            const message = new Product({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Product {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Product();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): Product {
            return Product.deserialize(bytes);
        }
    }
    export class Link extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            url?: string;
        }): Link {
            const message = new Link({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                url?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.url.length)
                writer.writeString(2, this.url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Link {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Link();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): Link {
            return Link.deserialize(bytes);
        }
    }
    export class Image extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: ImageType;
            url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, ImageType.PROFILE) as ImageType;
        }
        set type(value: ImageType) {
            pb_1.Message.setField(this, 1, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            type?: ImageType;
            url?: string;
        }): Image {
            const message = new Image({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: ImageType;
                url?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != ImageType.PROFILE)
                writer.writeEnum(1, this.type);
            if (this.url.length)
                writer.writeString(2, this.url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Image {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Image();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        message.url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): Image {
            return Image.deserialize(bytes);
        }
    }
    export class App extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            created_at?: string;
            updated_at?: string;
            name?: string;
            status?: AppStatus;
            products?: Product[];
            links?: Link[];
            images?: Image[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6, 7, 8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("products" in data && data.products != undefined) {
                    this.products = data.products;
                }
                if ("links" in data && data.links != undefined) {
                    this.links = data.links;
                }
                if ("images" in data && data.images != undefined) {
                    this.images = data.images;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set created_at(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get updated_at() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set updated_at(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, AppStatus.USER_STORIES) as AppStatus;
        }
        set status(value: AppStatus) {
            pb_1.Message.setField(this, 5, value);
        }
        get products() {
            return pb_1.Message.getRepeatedWrapperField(this, Product, 6) as Product[];
        }
        set products(value: Product[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get links() {
            return pb_1.Message.getRepeatedWrapperField(this, Link, 7) as Link[];
        }
        set links(value: Link[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get images() {
            return pb_1.Message.getRepeatedWrapperField(this, Image, 8) as Image[];
        }
        set images(value: Image[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        static fromObject(data: {
            id?: string;
            created_at?: string;
            updated_at?: string;
            name?: string;
            status?: AppStatus;
            products?: ReturnType<typeof Product.prototype.toObject>[];
            links?: ReturnType<typeof Link.prototype.toObject>[];
            images?: ReturnType<typeof Image.prototype.toObject>[];
        }): App {
            const message = new App({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.updated_at != null) {
                message.updated_at = data.updated_at;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.products != null) {
                message.products = data.products.map(item => Product.fromObject(item));
            }
            if (data.links != null) {
                message.links = data.links.map(item => Link.fromObject(item));
            }
            if (data.images != null) {
                message.images = data.images.map(item => Image.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                created_at?: string;
                updated_at?: string;
                name?: string;
                status?: AppStatus;
                products?: ReturnType<typeof Product.prototype.toObject>[];
                links?: ReturnType<typeof Link.prototype.toObject>[];
                images?: ReturnType<typeof Image.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.products != null) {
                data.products = this.products.map((item: Product) => item.toObject());
            }
            if (this.links != null) {
                data.links = this.links.map((item: Link) => item.toObject());
            }
            if (this.images != null) {
                data.images = this.images.map((item: Image) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.created_at.length)
                writer.writeString(2, this.created_at);
            if (this.updated_at.length)
                writer.writeString(3, this.updated_at);
            if (this.name.length)
                writer.writeString(4, this.name);
            if (this.status != AppStatus.USER_STORIES)
                writer.writeEnum(5, this.status);
            if (this.products.length)
                writer.writeRepeatedMessage(6, this.products, (item: Product) => item.serialize(writer));
            if (this.links.length)
                writer.writeRepeatedMessage(7, this.links, (item: Link) => item.serialize(writer));
            if (this.images.length)
                writer.writeRepeatedMessage(8, this.images, (item: Image) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): App {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new App();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.created_at = reader.readString();
                        break;
                    case 3:
                        message.updated_at = reader.readString();
                        break;
                    case 4:
                        message.name = reader.readString();
                        break;
                    case 5:
                        message.status = reader.readEnum();
                        break;
                    case 6:
                        reader.readMessage(message.products, () => pb_1.Message.addToRepeatedWrapperField(message, 6, Product.deserialize(reader), Product));
                        break;
                    case 7:
                        reader.readMessage(message.links, () => pb_1.Message.addToRepeatedWrapperField(message, 7, Link.deserialize(reader), Link));
                        break;
                    case 8:
                        reader.readMessage(message.images, () => pb_1.Message.addToRepeatedWrapperField(message, 8, Image.deserialize(reader), Image));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): App {
            return App.deserialize(bytes);
        }
    }
    export class Apps extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            apps?: App[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("apps" in data && data.apps != undefined) {
                    this.apps = data.apps;
                }
            }
        }
        get apps() {
            return pb_1.Message.getRepeatedWrapperField(this, App, 1) as App[];
        }
        set apps(value: App[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            apps?: ReturnType<typeof App.prototype.toObject>[];
        }): Apps {
            const message = new Apps({});
            if (data.apps != null) {
                message.apps = data.apps.map(item => App.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                apps?: ReturnType<typeof App.prototype.toObject>[];
            } = {};
            if (this.apps != null) {
                data.apps = this.apps.map((item: App) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.apps.length)
                writer.writeRepeatedMessage(1, this.apps, (item: App) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Apps {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Apps();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.apps, () => pb_1.Message.addToRepeatedWrapperField(message, 1, App.deserialize(reader), App));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): Apps {
            return Apps.deserialize(bytes);
        }
    }
    export class Location extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            latitude?: number;
            longitude?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("latitude" in data && data.latitude != undefined) {
                    this.latitude = data.latitude;
                }
                if ("longitude" in data && data.longitude != undefined) {
                    this.longitude = data.longitude;
                }
            }
        }
        get latitude() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set latitude(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get longitude() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set longitude(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            latitude?: number;
            longitude?: number;
        }): Location {
            const message = new Location({});
            if (data.latitude != null) {
                message.latitude = data.latitude;
            }
            if (data.longitude != null) {
                message.longitude = data.longitude;
            }
            return message;
        }
        toObject() {
            const data: {
                latitude?: number;
                longitude?: number;
            } = {};
            if (this.latitude != null) {
                data.latitude = this.latitude;
            }
            if (this.longitude != null) {
                data.longitude = this.longitude;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.latitude != 0)
                writer.writeFloat(1, this.latitude);
            if (this.longitude != 0)
                writer.writeFloat(2, this.longitude);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Location {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Location();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.latitude = reader.readFloat();
                        break;
                    case 2:
                        message.longitude = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): Location {
            return Location.deserialize(bytes);
        }
    }
    export class User extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            created_at?: string;
            supabase_id?: string;
            role?: UserRole;
            company?: string;
            email?: string;
            phone_number?: string;
            location?: Location;
            language?: string;
            request_status?: UserRequestStatus;
            apps?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("supabase_id" in data && data.supabase_id != undefined) {
                    this.supabase_id = data.supabase_id;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("company" in data && data.company != undefined) {
                    this.company = data.company;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("phone_number" in data && data.phone_number != undefined) {
                    this.phone_number = data.phone_number;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("language" in data && data.language != undefined) {
                    this.language = data.language;
                }
                if ("request_status" in data && data.request_status != undefined) {
                    this.request_status = data.request_status;
                }
                if ("apps" in data && data.apps != undefined) {
                    this.apps = data.apps;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set created_at(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get supabase_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set supabase_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 4, UserRole.ADMIN) as UserRole;
        }
        set role(value: UserRole) {
            pb_1.Message.setField(this, 4, value);
        }
        get company() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set company(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get phone_number() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set phone_number(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get location() {
            return pb_1.Message.getWrapperField(this, Location, 8) as Location;
        }
        set location(value: Location) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_location() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get language() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set language(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get request_status() {
            return pb_1.Message.getFieldWithDefault(this, 10, UserRequestStatus.IDLE) as UserRequestStatus;
        }
        set request_status(value: UserRequestStatus) {
            pb_1.Message.setField(this, 10, value);
        }
        get apps() {
            return pb_1.Message.getFieldWithDefault(this, 11, []) as string[];
        }
        set apps(value: string[]) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            id?: string;
            created_at?: string;
            supabase_id?: string;
            role?: UserRole;
            company?: string;
            email?: string;
            phone_number?: string;
            location?: ReturnType<typeof Location.prototype.toObject>;
            language?: string;
            request_status?: UserRequestStatus;
            apps?: string[];
        }): User {
            const message = new User({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.supabase_id != null) {
                message.supabase_id = data.supabase_id;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.company != null) {
                message.company = data.company;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.phone_number != null) {
                message.phone_number = data.phone_number;
            }
            if (data.location != null) {
                message.location = Location.fromObject(data.location);
            }
            if (data.language != null) {
                message.language = data.language;
            }
            if (data.request_status != null) {
                message.request_status = data.request_status;
            }
            if (data.apps != null) {
                message.apps = data.apps;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                created_at?: string;
                supabase_id?: string;
                role?: UserRole;
                company?: string;
                email?: string;
                phone_number?: string;
                location?: ReturnType<typeof Location.prototype.toObject>;
                language?: string;
                request_status?: UserRequestStatus;
                apps?: string[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.supabase_id != null) {
                data.supabase_id = this.supabase_id;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.company != null) {
                data.company = this.company;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.phone_number != null) {
                data.phone_number = this.phone_number;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.language != null) {
                data.language = this.language;
            }
            if (this.request_status != null) {
                data.request_status = this.request_status;
            }
            if (this.apps != null) {
                data.apps = this.apps;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.created_at.length)
                writer.writeString(2, this.created_at);
            if (this.supabase_id.length)
                writer.writeString(3, this.supabase_id);
            if (this.role != UserRole.ADMIN)
                writer.writeEnum(4, this.role);
            if (this.company.length)
                writer.writeString(5, this.company);
            if (this.email.length)
                writer.writeString(6, this.email);
            if (this.phone_number.length)
                writer.writeString(7, this.phone_number);
            if (this.has_location)
                writer.writeMessage(8, this.location, () => this.location.serialize(writer));
            if (this.language.length)
                writer.writeString(9, this.language);
            if (this.request_status != UserRequestStatus.IDLE)
                writer.writeEnum(10, this.request_status);
            if (this.apps.length)
                writer.writeRepeatedString(11, this.apps);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.created_at = reader.readString();
                        break;
                    case 3:
                        message.supabase_id = reader.readString();
                        break;
                    case 4:
                        message.role = reader.readEnum();
                        break;
                    case 5:
                        message.company = reader.readString();
                        break;
                    case 6:
                        message.email = reader.readString();
                        break;
                    case 7:
                        message.phone_number = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.location, () => message.location = Location.deserialize(reader));
                        break;
                    case 9:
                        message.language = reader.readString();
                        break;
                    case 10:
                        message.request_status = reader.readEnum();
                        break;
                    case 11:
                        pb_1.Message.addToRepeatedField(message, 11, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): User {
            return User.deserialize(bytes);
        }
    }
    export class Users extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            users?: User[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
            }
        }
        get users() {
            return pb_1.Message.getRepeatedWrapperField(this, User, 1) as User[];
        }
        set users(value: User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            users?: ReturnType<typeof User.prototype.toObject>[];
        }): Users {
            const message = new Users({});
            if (data.users != null) {
                message.users = data.users.map(item => User.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                users?: ReturnType<typeof User.prototype.toObject>[];
            } = {};
            if (this.users != null) {
                data.users = this.users.map((item: User) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.users.length)
                writer.writeRepeatedMessage(1, this.users, (item: User) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Users {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Users();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.users, () => pb_1.Message.addToRepeatedWrapperField(message, 1, User.deserialize(reader), User));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): Users {
            return Users.deserialize(bytes);
        }
    }
}
