// Generated by protod v0.3.3
import {
    enumField,
    FieldSet,
    floatField,
    fromBytes,
    fromJSON,
    JSON,
    repeatedField,
    stringField,
    toBytes,
    toJSON,
  } from "https://deno.land/x/protod@v0.3.3/mod.ts";
  
  export enum AppStatus {
    USER_STORIES = 0,
    DESIGN = 1,
    DEVELOPMENT = 2,
    RELEASE = 3,
  }
  
  export enum ImageType {
    PROFILE = 0,
    COVER = 1,
  }
  
  export enum UserRole {
    ADMIN = 0,
    USER = 1,
  }
  
  export enum UserRequestStatus {
    REQUESTED = 0,
    ACCEPTED = 1,
    UPDATE_REQUESTED = 2,
    UPDATE_ACCEPTED = 3,
  }
  
  export class Product {
    id: string;
  
    constructor(init: Partial<Product>) {
      this.id = init.id ?? "";
    }
  
    static fields: FieldSet<Product> = {
      id: [1, stringField],
    };
  
    static fromBytes(bytes: Uint8Array): Product {
      return new Product(
        fromBytes<Product>(bytes, Product.fields),
      );
    }
  
    static fromJSON(json: JSON): Product {
      return new Product(
        fromJSON<Product>(json, Product.fields),
      );
    }
  
    toBytes(): Uint8Array {
      return toBytes<Product>(this, Product.fields);
    }
  
    toJSON() {
      return toJSON<Product>(this, Product.fields);
    }
  }
  
  export class Link {
    name: string;
    url: string;
  
    constructor(init: Partial<Link>) {
      this.name = init.name ?? "";
      this.url = init.url ?? "";
    }
  
    static fields: FieldSet<Link> = {
      name: [1, stringField],
      url: [2, stringField],
    };
  
    static fromBytes(bytes: Uint8Array): Link {
      return new Link(
        fromBytes<Link>(bytes, Link.fields),
      );
    }
  
    static fromJSON(json: JSON): Link {
      return new Link(
        fromJSON<Link>(json, Link.fields),
      );
    }
  
    toBytes(): Uint8Array {
      return toBytes<Link>(this, Link.fields);
    }
  
    toJSON() {
      return toJSON<Link>(this, Link.fields);
    }
  }
  
  export class Image {
    type: ImageType;
    url: string;
  
    constructor(init: Partial<Image>) {
      this.type = init.type ?? ImageType.PROFILE;
      this.url = init.url ?? "";
    }
  
    static fields: FieldSet<Image> = {
      type: [1, enumField(ImageType)],
      url: [2, stringField],
    };
  
    static fromBytes(bytes: Uint8Array): Image {
      return new Image(
        fromBytes<Image>(bytes, Image.fields),
      );
    }
  
    static fromJSON(json: JSON): Image {
      return new Image(
        fromJSON<Image>(json, Image.fields),
      );
    }
  
    toBytes(): Uint8Array {
      return toBytes<Image>(this, Image.fields);
    }
  
    toJSON() {
      return toJSON<Image>(this, Image.fields);
    }
  }
  
  export class App {
    id: string;
    created_at: string;
    updated_at: string;
    name: string;
    status: AppStatus;
    products: Product[];
    links: Link[];
    images: Image[];
  
    constructor(init: Partial<App>) {
      this.id = init.id ?? "";
      this.created_at = init.created_at ?? "";
      this.updated_at = init.updated_at ?? "";
      this.name = init.name ?? "";
      this.status = init.status ?? AppStatus.USER_STORIES;
      this.products = init.products ?? [];
      this.links = init.links ?? [];
      this.images = init.images ?? [];
    }
  
    static fields: FieldSet<App> = {
      id: [1, stringField],
      created_at: [2, stringField],
      updated_at: [3, stringField],
      name: [4, stringField],
      status: [5, enumField(AppStatus)],
      products: [6, repeatedField(Product)],
      links: [7, repeatedField(Link)],
      images: [8, repeatedField(Image)],
    };
  
    static fromBytes(bytes: Uint8Array): App {
      return new App(
        fromBytes<App>(bytes, App.fields),
      );
    }
  
    static fromJSON(json: JSON): App {
      return new App(
        fromJSON<App>(json, App.fields),
      );
    }
  
    toBytes(): Uint8Array {
      return toBytes<App>(this, App.fields);
    }
  
    toJSON() {
      return toJSON<App>(this, App.fields);
    }
  }
  
  export class Apps {
    apps: App[];
  
    constructor(init: Partial<Apps>) {
      this.apps = init.apps ?? [];
    }
  
    static fields: FieldSet<Apps> = {
      apps: [1, repeatedField(App)],
    };
  
    static fromBytes(bytes: Uint8Array): Apps {
      return new Apps(
        fromBytes<Apps>(bytes, Apps.fields),
      );
    }
  
    static fromJSON(json: JSON): Apps {
      return new Apps(
        fromJSON<Apps>(json, Apps.fields),
      );
    }
  
    toBytes(): Uint8Array {
      return toBytes<Apps>(this, Apps.fields);
    }
  
    toJSON() {
      return toJSON<Apps>(this, Apps.fields);
    }
  }
  
  export class Location {
    latitude: number;
    longitude: number;
  
    constructor(init: Partial<Location>) {
      this.latitude = init.latitude ?? 0;
      this.longitude = init.longitude ?? 0;
    }
  
    static fields: FieldSet<Location> = {
      latitude: [1, floatField],
      longitude: [2, floatField],
    };
  
    static fromBytes(bytes: Uint8Array): Location {
      return new Location(
        fromBytes<Location>(bytes, Location.fields),
      );
    }
  
    static fromJSON(json: JSON): Location {
      return new Location(
        fromJSON<Location>(json, Location.fields),
      );
    }
  
    toBytes(): Uint8Array {
      return toBytes<Location>(this, Location.fields);
    }
  
    toJSON() {
      return toJSON<Location>(this, Location.fields);
    }
  }
  
  export class User {
    id: string;
    created_at: string;
    supabase_id: string;
    role: UserRole;
    company: string;
    email: string;
    phone_number: string;
    location: Location;
    language: string;
    request_status: UserRequestStatus;
    apps: App[];
  
    constructor(init: Partial<User>) {
      this.id = init.id ?? "";
      this.created_at = init.created_at ?? "";
      this.supabase_id = init.supabase_id ?? "";
      this.role = init.role ?? UserRole.ADMIN;
      this.company = init.company ?? "";
      this.email = init.email ?? "";
      this.phone_number = init.phone_number ?? "";
      this.location = init.location ?? new Location({});
      this.language = init.language ?? "";
      this.request_status = init.request_status ?? UserRequestStatus.REQUESTED;
      this.apps = init.apps ?? [];
    }
  
    static fields: FieldSet<User> = {
      id: [1, stringField],
      created_at: [2, stringField],
      supabase_id: [3, stringField],
      role: [4, enumField(UserRole)],
      company: [5, stringField],
      email: [6, stringField],
      phone_number: [7, stringField],
      location: [8, Location],
      language: [9, stringField],
      request_status: [10, enumField(UserRequestStatus)],
      apps: [11, repeatedField(App)],
    };
  
    static fromBytes(bytes: Uint8Array): User {
      return new User(
        fromBytes<User>(bytes, User.fields),
      );
    }
  
    static fromJSON(json: JSON): User {
      return new User(
        fromJSON<User>(json, User.fields),
      );
    }
  
    toBytes(): Uint8Array {
      return toBytes<User>(this, User.fields);
    }
  
    toJSON() {
      return toJSON<User>(this, User.fields);
    }
  }
  
  export class Users {
    users: User[];
  
    constructor(init: Partial<Users>) {
      this.users = init.users ?? [];
    }
  
    static fields: FieldSet<Users> = {
      users: [1, repeatedField(User)],
    };
  
    static fromBytes(bytes: Uint8Array): Users {
      return new Users(
        fromBytes<Users>(bytes, Users.fields),
      );
    }
  
    static fromJSON(json: JSON): Users {
      return new Users(
        fromJSON<Users>(json, Users.fields),
      );
    }
  
    toBytes(): Uint8Array {
      return toBytes<Users>(this, Users.fields);
    }
  
    toJSON() {
      return toJSON<Users>(this, Users.fields);
    }
  }