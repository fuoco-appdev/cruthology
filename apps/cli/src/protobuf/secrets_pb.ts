// @generated by protoc-gen-es v0.3.0 with parameter "target=ts"
// @generated from file protobuf/secrets.proto (package secrets, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message secrets.PublicSecrets
 */
export class PublicSecrets extends Message<PublicSecrets> {
  /**
   * @generated from field: string supabase_anon_key = 1;
   */
  supabaseAnonKey = "";

  /**
   * @generated from field: string medusa_public_key = 2;
   */
  medusaPublicKey = "";

  /**
   * @generated from field: string meilisearch_public_key = 3;
   */
  meilisearchPublicKey = "";

  /**
   * @generated from field: string mapbox_access_token = 4;
   */
  mapboxAccessToken = "";

  /**
   * @generated from field: string stripe_publishable_key = 5;
   */
  stripePublishableKey = "";

  /**
   * @generated from field: string deepl_auth_key = 6;
   */
  deeplAuthKey = "";

  constructor(data?: PartialMessage<PublicSecrets>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "secrets.PublicSecrets";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "supabase_anon_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "medusa_public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "meilisearch_public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "mapbox_access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "stripe_publishable_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "deepl_auth_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublicSecrets {
    return new PublicSecrets().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublicSecrets {
    return new PublicSecrets().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublicSecrets {
    return new PublicSecrets().fromJsonString(jsonString, options);
  }

  static equals(a: PublicSecrets | PlainMessage<PublicSecrets> | undefined, b: PublicSecrets | PlainMessage<PublicSecrets> | undefined): boolean {
    return proto3.util.equals(PublicSecrets, a, b);
  }
}

/**
 * @generated from message secrets.PrivateSecrets
 */
export class PrivateSecrets extends Message<PrivateSecrets> {
  /**
   * @generated from field: string s3_access_key_id = 1;
   */
  s3AccessKeyId = "";

  /**
   * @generated from field: string s3_secret_access_key = 2;
   */
  s3SecretAccessKey = "";

  constructor(data?: PartialMessage<PrivateSecrets>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "secrets.PrivateSecrets";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "s3_access_key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "s3_secret_access_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrivateSecrets {
    return new PrivateSecrets().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrivateSecrets {
    return new PrivateSecrets().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrivateSecrets {
    return new PrivateSecrets().fromJsonString(jsonString, options);
  }

  static equals(a: PrivateSecrets | PlainMessage<PrivateSecrets> | undefined, b: PrivateSecrets | PlainMessage<PrivateSecrets> | undefined): boolean {
    return proto3.util.equals(PrivateSecrets, a, b);
  }
}

