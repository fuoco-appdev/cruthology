// @generated by protoc-gen-es v0.3.0 with parameter "target=ts"
// @generated from file protobuf/core.proto (package core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum core.StorageFolderType
 */
export enum StorageFolderType {
  /**
   * @generated from enum value: Avatars = 0;
   */
  Avatars = 0,

  /**
   * @generated from enum value: Thumbnails = 1;
   */
  Thumbnails = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(StorageFolderType)
proto3.util.setEnumType(StorageFolderType, "core.StorageFolderType", [
  { no: 0, name: "Avatars" },
  { no: 1, name: "Thumbnails" },
]);

/**
 * @generated from message core.PublicSecrets
 */
export class PublicSecrets extends Message<PublicSecrets> {
  /**
   * @generated from field: string supabase_anon_key = 1;
   */
  supabaseAnonKey = "";

  /**
   * @generated from field: string medusa_public_key = 2;
   */
  medusaPublicKey = "";

  /**
   * @generated from field: string meilisearch_public_key = 3;
   */
  meilisearchPublicKey = "";

  /**
   * @generated from field: string mapbox_access_token = 4;
   */
  mapboxAccessToken = "";

  /**
   * @generated from field: string stripe_publishable_key = 5;
   */
  stripePublishableKey = "";

  /**
   * @generated from field: string deepl_auth_key = 6;
   */
  deeplAuthKey = "";

  constructor(data?: PartialMessage<PublicSecrets>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.PublicSecrets";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "supabase_anon_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "medusa_public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "meilisearch_public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "mapbox_access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "stripe_publishable_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "deepl_auth_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublicSecrets {
    return new PublicSecrets().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublicSecrets {
    return new PublicSecrets().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublicSecrets {
    return new PublicSecrets().fromJsonString(jsonString, options);
  }

  static equals(a: PublicSecrets | PlainMessage<PublicSecrets> | undefined, b: PublicSecrets | PlainMessage<PublicSecrets> | undefined): boolean {
    return proto3.util.equals(PublicSecrets, a, b);
  }
}

/**
 * @generated from message core.PrivateSecrets
 */
export class PrivateSecrets extends Message<PrivateSecrets> {
  /**
   * @generated from field: string s3_access_key_id = 1;
   */
  s3AccessKeyId = "";

  /**
   * @generated from field: string s3_secret_access_key = 2;
   */
  s3SecretAccessKey = "";

  constructor(data?: PartialMessage<PrivateSecrets>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.PrivateSecrets";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "s3_access_key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "s3_secret_access_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrivateSecrets {
    return new PrivateSecrets().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrivateSecrets {
    return new PrivateSecrets().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrivateSecrets {
    return new PrivateSecrets().fromJsonString(jsonString, options);
  }

  static equals(a: PrivateSecrets | PlainMessage<PrivateSecrets> | undefined, b: PrivateSecrets | PlainMessage<PrivateSecrets> | undefined): boolean {
    return proto3.util.equals(PrivateSecrets, a, b);
  }
}

/**
 * @generated from message core.UpdateCustomerRequest
 */
export class UpdateCustomerRequest extends Message<UpdateCustomerRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string first_name = 2;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 3;
   */
  lastName = "";

  /**
   * @generated from field: string phone = 4;
   */
  phone = "";

  /**
   * @generated from field: string metadata = 5;
   */
  metadata = "";

  constructor(data?: PartialMessage<UpdateCustomerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.UpdateCustomerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCustomerRequest {
    return new UpdateCustomerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCustomerRequest {
    return new UpdateCustomerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCustomerRequest {
    return new UpdateCustomerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCustomerRequest | PlainMessage<UpdateCustomerRequest> | undefined, b: UpdateCustomerRequest | PlainMessage<UpdateCustomerRequest> | undefined): boolean {
    return proto3.util.equals(UpdateCustomerRequest, a, b);
  }
}

/**
 * @generated from message core.UpdateCustomerResponse
 */
export class UpdateCustomerResponse extends Message<UpdateCustomerResponse> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<UpdateCustomerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.UpdateCustomerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCustomerResponse {
    return new UpdateCustomerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCustomerResponse {
    return new UpdateCustomerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCustomerResponse {
    return new UpdateCustomerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCustomerResponse | PlainMessage<UpdateCustomerResponse> | undefined, b: UpdateCustomerResponse | PlainMessage<UpdateCustomerResponse> | undefined): boolean {
    return proto3.util.equals(UpdateCustomerResponse, a, b);
  }
}

/**
 * @generated from message core.CustomersRequest
 */
export class CustomersRequest extends Message<CustomersRequest> {
  /**
   * @generated from field: repeated string customer_ids = 1;
   */
  customerIds: string[] = [];

  constructor(data?: PartialMessage<CustomersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.CustomersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "customer_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomersRequest {
    return new CustomersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomersRequest {
    return new CustomersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomersRequest {
    return new CustomersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CustomersRequest | PlainMessage<CustomersRequest> | undefined, b: CustomersRequest | PlainMessage<CustomersRequest> | undefined): boolean {
    return proto3.util.equals(CustomersRequest, a, b);
  }
}

/**
 * @generated from message core.CustomerMetadataResponse
 */
export class CustomerMetadataResponse extends Message<CustomerMetadataResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string first_name = 2;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 3;
   */
  lastName = "";

  /**
   * @generated from field: bool has_account = 4;
   */
  hasAccount = false;

  /**
   * @generated from field: string created_at = 5;
   */
  createdAt = "";

  /**
   * @generated from field: string updated_at = 6;
   */
  updatedAt = "";

  /**
   * @generated from field: string deleted_at = 7;
   */
  deletedAt = "";

  constructor(data?: PartialMessage<CustomerMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.CustomerMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "has_account", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "deleted_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomerMetadataResponse {
    return new CustomerMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomerMetadataResponse {
    return new CustomerMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomerMetadataResponse {
    return new CustomerMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CustomerMetadataResponse | PlainMessage<CustomerMetadataResponse> | undefined, b: CustomerMetadataResponse | PlainMessage<CustomerMetadataResponse> | undefined): boolean {
    return proto3.util.equals(CustomerMetadataResponse, a, b);
  }
}

/**
 * @generated from message core.CustomerResponse
 */
export class CustomerResponse extends Message<CustomerResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: string first_name = 3;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 4;
   */
  lastName = "";

  /**
   * @generated from field: string billing_address_id = 5;
   */
  billingAddressId = "";

  /**
   * @generated from field: string phone = 6;
   */
  phone = "";

  /**
   * @generated from field: bool has_account = 7;
   */
  hasAccount = false;

  /**
   * @generated from field: string created_at = 8;
   */
  createdAt = "";

  /**
   * @generated from field: string updated_at = 9;
   */
  updatedAt = "";

  /**
   * @generated from field: string deleted_at = 10;
   */
  deletedAt = "";

  /**
   * @generated from field: string metadata = 11;
   */
  metadata = "";

  constructor(data?: PartialMessage<CustomerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.CustomerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "billing_address_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "has_account", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "deleted_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomerResponse {
    return new CustomerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomerResponse {
    return new CustomerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomerResponse {
    return new CustomerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CustomerResponse | PlainMessage<CustomerResponse> | undefined, b: CustomerResponse | PlainMessage<CustomerResponse> | undefined): boolean {
    return proto3.util.equals(CustomerResponse, a, b);
  }
}

/**
 * @generated from message core.CustomersResponse
 */
export class CustomersResponse extends Message<CustomersResponse> {
  /**
   * @generated from field: repeated core.CustomerResponse customers = 1;
   */
  customers: CustomerResponse[] = [];

  constructor(data?: PartialMessage<CustomersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.CustomersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "customers", kind: "message", T: CustomerResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomersResponse {
    return new CustomersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomersResponse {
    return new CustomersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomersResponse {
    return new CustomersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CustomersResponse | PlainMessage<CustomersResponse> | undefined, b: CustomersResponse | PlainMessage<CustomersResponse> | undefined): boolean {
    return proto3.util.equals(CustomersResponse, a, b);
  }
}

/**
 * @generated from message core.AddCustomerToGroupRequest
 */
export class AddCustomerToGroupRequest extends Message<AddCustomerToGroupRequest> {
  /**
   * @generated from field: string customer_group_id = 1;
   */
  customerGroupId = "";

  /**
   * @generated from field: string customer_id = 2;
   */
  customerId = "";

  constructor(data?: PartialMessage<AddCustomerToGroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.AddCustomerToGroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "customer_group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddCustomerToGroupRequest {
    return new AddCustomerToGroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddCustomerToGroupRequest {
    return new AddCustomerToGroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddCustomerToGroupRequest {
    return new AddCustomerToGroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddCustomerToGroupRequest | PlainMessage<AddCustomerToGroupRequest> | undefined, b: AddCustomerToGroupRequest | PlainMessage<AddCustomerToGroupRequest> | undefined): boolean {
    return proto3.util.equals(AddCustomerToGroupRequest, a, b);
  }
}

/**
 * @generated from message core.RemoveCustomerFromGroupRequest
 */
export class RemoveCustomerFromGroupRequest extends Message<RemoveCustomerFromGroupRequest> {
  /**
   * @generated from field: string customer_group_id = 1;
   */
  customerGroupId = "";

  /**
   * @generated from field: string customer_id = 2;
   */
  customerId = "";

  constructor(data?: PartialMessage<RemoveCustomerFromGroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.RemoveCustomerFromGroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "customer_group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveCustomerFromGroupRequest {
    return new RemoveCustomerFromGroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveCustomerFromGroupRequest {
    return new RemoveCustomerFromGroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveCustomerFromGroupRequest {
    return new RemoveCustomerFromGroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveCustomerFromGroupRequest | PlainMessage<RemoveCustomerFromGroupRequest> | undefined, b: RemoveCustomerFromGroupRequest | PlainMessage<RemoveCustomerFromGroupRequest> | undefined): boolean {
    return proto3.util.equals(RemoveCustomerFromGroupRequest, a, b);
  }
}

/**
 * @generated from message core.CustomerGroupResponse
 */
export class CustomerGroupResponse extends Message<CustomerGroupResponse> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<CustomerGroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.CustomerGroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomerGroupResponse {
    return new CustomerGroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomerGroupResponse {
    return new CustomerGroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomerGroupResponse {
    return new CustomerGroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CustomerGroupResponse | PlainMessage<CustomerGroupResponse> | undefined, b: CustomerGroupResponse | PlainMessage<CustomerGroupResponse> | undefined): boolean {
    return proto3.util.equals(CustomerGroupResponse, a, b);
  }
}

/**
 * @generated from message core.PriceListsRequest
 */
export class PriceListsRequest extends Message<PriceListsRequest> {
  /**
   * @generated from field: int32 offset = 1;
   */
  offset = 0;

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: repeated string status = 3;
   */
  status: string[] = [];

  /**
   * @generated from field: repeated string customer_groups = 4;
   */
  customerGroups: string[] = [];

  /**
   * @generated from field: repeated string type = 5;
   */
  type: string[] = [];

  constructor(data?: PartialMessage<PriceListsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.PriceListsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "customer_groups", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PriceListsRequest {
    return new PriceListsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PriceListsRequest {
    return new PriceListsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PriceListsRequest {
    return new PriceListsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PriceListsRequest | PlainMessage<PriceListsRequest> | undefined, b: PriceListsRequest | PlainMessage<PriceListsRequest> | undefined): boolean {
    return proto3.util.equals(PriceListsRequest, a, b);
  }
}

/**
 * @generated from message core.PriceListsResponse
 */
export class PriceListsResponse extends Message<PriceListsResponse> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<PriceListsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.PriceListsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PriceListsResponse {
    return new PriceListsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PriceListsResponse {
    return new PriceListsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PriceListsResponse {
    return new PriceListsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PriceListsResponse | PlainMessage<PriceListsResponse> | undefined, b: PriceListsResponse | PlainMessage<PriceListsResponse> | undefined): boolean {
    return proto3.util.equals(PriceListsResponse, a, b);
  }
}

/**
 * @generated from message core.OrdersRequest
 */
export class OrdersRequest extends Message<OrdersRequest> {
  /**
   * @generated from field: int32 offset = 1;
   */
  offset = 0;

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  constructor(data?: PartialMessage<OrdersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.OrdersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrdersRequest {
    return new OrdersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrdersRequest {
    return new OrdersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrdersRequest {
    return new OrdersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: OrdersRequest | PlainMessage<OrdersRequest> | undefined, b: OrdersRequest | PlainMessage<OrdersRequest> | undefined): boolean {
    return proto3.util.equals(OrdersRequest, a, b);
  }
}

/**
 * @generated from message core.OrdersResponse
 */
export class OrdersResponse extends Message<OrdersResponse> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<OrdersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.OrdersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrdersResponse {
    return new OrdersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrdersResponse {
    return new OrdersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrdersResponse {
    return new OrdersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: OrdersResponse | PlainMessage<OrdersResponse> | undefined, b: OrdersResponse | PlainMessage<OrdersResponse> | undefined): boolean {
    return proto3.util.equals(OrdersResponse, a, b);
  }
}

/**
 * @generated from message core.ProductCountRequest
 */
export class ProductCountRequest extends Message<ProductCountRequest> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  constructor(data?: PartialMessage<ProductCountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.ProductCountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductCountRequest {
    return new ProductCountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductCountRequest {
    return new ProductCountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductCountRequest {
    return new ProductCountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProductCountRequest | PlainMessage<ProductCountRequest> | undefined, b: ProductCountRequest | PlainMessage<ProductCountRequest> | undefined): boolean {
    return proto3.util.equals(ProductCountRequest, a, b);
  }
}

/**
 * @generated from message core.ProductCountResponse
 */
export class ProductCountResponse extends Message<ProductCountResponse> {
  /**
   * @generated from field: int32 count = 1;
   */
  count = 0;

  constructor(data?: PartialMessage<ProductCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.ProductCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductCountResponse {
    return new ProductCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductCountResponse {
    return new ProductCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductCountResponse {
    return new ProductCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProductCountResponse | PlainMessage<ProductCountResponse> | undefined, b: ProductCountResponse | PlainMessage<ProductCountResponse> | undefined): boolean {
    return proto3.util.equals(ProductCountResponse, a, b);
  }
}

/**
 * @generated from message core.ProductMetadataResponse
 */
export class ProductMetadataResponse extends Message<ProductMetadataResponse> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string subtitle = 2;
   */
  subtitle = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: string thumbnail = 4;
   */
  thumbnail = "";

  constructor(data?: PartialMessage<ProductMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.ProductMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subtitle", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "thumbnail", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductMetadataResponse {
    return new ProductMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductMetadataResponse {
    return new ProductMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductMetadataResponse {
    return new ProductMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProductMetadataResponse | PlainMessage<ProductMetadataResponse> | undefined, b: ProductMetadataResponse | PlainMessage<ProductMetadataResponse> | undefined): boolean {
    return proto3.util.equals(ProductMetadataResponse, a, b);
  }
}

/**
 * @generated from message core.StockLocationResponse
 */
export class StockLocationResponse extends Message<StockLocationResponse> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<StockLocationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.StockLocationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockLocationResponse {
    return new StockLocationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockLocationResponse {
    return new StockLocationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockLocationResponse {
    return new StockLocationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StockLocationResponse | PlainMessage<StockLocationResponse> | undefined, b: StockLocationResponse | PlainMessage<StockLocationResponse> | undefined): boolean {
    return proto3.util.equals(StockLocationResponse, a, b);
  }
}

/**
 * @generated from message core.StockLocationsResponse
 */
export class StockLocationsResponse extends Message<StockLocationsResponse> {
  /**
   * @generated from field: repeated string locations = 1;
   */
  locations: string[] = [];

  constructor(data?: PartialMessage<StockLocationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.StockLocationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locations", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockLocationsResponse {
    return new StockLocationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockLocationsResponse {
    return new StockLocationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockLocationsResponse {
    return new StockLocationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StockLocationsResponse | PlainMessage<StockLocationsResponse> | undefined, b: StockLocationsResponse | PlainMessage<StockLocationsResponse> | undefined): boolean {
    return proto3.util.equals(StockLocationsResponse, a, b);
  }
}

/**
 * @generated from message core.AccountRequest
 */
export class AccountRequest extends Message<AccountRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string customer_id = 2;
   */
  customerId = "";

  /**
   * @generated from field: string supabase_id = 3;
   */
  supabaseId = "";

  /**
   * @generated from field: string profile_url = 4;
   */
  profileUrl = "";

  /**
   * @generated from field: string status = 5;
   */
  status = "";

  /**
   * @generated from field: string language_code = 7;
   */
  languageCode = "";

  /**
   * @generated from field: string username = 8;
   */
  username = "";

  constructor(data?: PartialMessage<AccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.AccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "supabase_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "profile_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "language_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountRequest {
    return new AccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountRequest {
    return new AccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountRequest {
    return new AccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountRequest | PlainMessage<AccountRequest> | undefined, b: AccountRequest | PlainMessage<AccountRequest> | undefined): boolean {
    return proto3.util.equals(AccountRequest, a, b);
  }
}

/**
 * @generated from message core.AccountResponse
 */
export class AccountResponse extends Message<AccountResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string customer_id = 2;
   */
  customerId = "";

  /**
   * @generated from field: string supabase_id = 3;
   */
  supabaseId = "";

  /**
   * @generated from field: string profile_url = 4;
   */
  profileUrl = "";

  /**
   * @generated from field: string status = 5;
   */
  status = "";

  /**
   * @generated from field: string update_at = 6;
   */
  updateAt = "";

  /**
   * @generated from field: string language_code = 7;
   */
  languageCode = "";

  /**
   * @generated from field: string username = 8;
   */
  username = "";

  constructor(data?: PartialMessage<AccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.AccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "supabase_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "profile_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "update_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "language_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountResponse {
    return new AccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountResponse {
    return new AccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountResponse {
    return new AccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountResponse | PlainMessage<AccountResponse> | undefined, b: AccountResponse | PlainMessage<AccountResponse> | undefined): boolean {
    return proto3.util.equals(AccountResponse, a, b);
  }
}

/**
 * @generated from message core.AccountsRequest
 */
export class AccountsRequest extends Message<AccountsRequest> {
  /**
   * @generated from field: repeated string account_ids = 1;
   */
  accountIds: string[] = [];

  constructor(data?: PartialMessage<AccountsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.AccountsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountsRequest {
    return new AccountsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountsRequest {
    return new AccountsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountsRequest {
    return new AccountsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountsRequest | PlainMessage<AccountsRequest> | undefined, b: AccountsRequest | PlainMessage<AccountsRequest> | undefined): boolean {
    return proto3.util.equals(AccountsRequest, a, b);
  }
}

/**
 * @generated from message core.AccountsResponse
 */
export class AccountsResponse extends Message<AccountsResponse> {
  /**
   * @generated from field: repeated core.AccountResponse accounts = 1;
   */
  accounts: AccountResponse[] = [];

  constructor(data?: PartialMessage<AccountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.AccountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: AccountResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountsResponse {
    return new AccountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountsResponse {
    return new AccountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountsResponse {
    return new AccountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountsResponse | PlainMessage<AccountsResponse> | undefined, b: AccountsResponse | PlainMessage<AccountsResponse> | undefined): boolean {
    return proto3.util.equals(AccountsResponse, a, b);
  }
}

/**
 * @generated from message core.AccountExistsRequest
 */
export class AccountExistsRequest extends Message<AccountExistsRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  constructor(data?: PartialMessage<AccountExistsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.AccountExistsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountExistsRequest {
    return new AccountExistsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountExistsRequest {
    return new AccountExistsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountExistsRequest {
    return new AccountExistsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountExistsRequest | PlainMessage<AccountExistsRequest> | undefined, b: AccountExistsRequest | PlainMessage<AccountExistsRequest> | undefined): boolean {
    return proto3.util.equals(AccountExistsRequest, a, b);
  }
}

/**
 * @generated from message core.AccountExistsResponse
 */
export class AccountExistsResponse extends Message<AccountExistsResponse> {
  /**
   * @generated from field: bool exists = 1;
   */
  exists = false;

  constructor(data?: PartialMessage<AccountExistsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.AccountExistsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exists", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountExistsResponse {
    return new AccountExistsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountExistsResponse {
    return new AccountExistsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountExistsResponse {
    return new AccountExistsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountExistsResponse | PlainMessage<AccountExistsResponse> | undefined, b: AccountExistsResponse | PlainMessage<AccountExistsResponse> | undefined): boolean {
    return proto3.util.equals(AccountExistsResponse, a, b);
  }
}

/**
 * @generated from message core.AccountLikeRequest
 */
export class AccountLikeRequest extends Message<AccountLikeRequest> {
  /**
   * @generated from field: string query_username = 1;
   */
  queryUsername = "";

  /**
   * @generated from field: string account_id = 2;
   */
  accountId = "";

  /**
   * @generated from field: int32 offset = 3;
   */
  offset = 0;

  /**
   * @generated from field: int32 limit = 4;
   */
  limit = 0;

  constructor(data?: PartialMessage<AccountLikeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.AccountLikeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query_username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountLikeRequest {
    return new AccountLikeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountLikeRequest {
    return new AccountLikeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountLikeRequest {
    return new AccountLikeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountLikeRequest | PlainMessage<AccountLikeRequest> | undefined, b: AccountLikeRequest | PlainMessage<AccountLikeRequest> | undefined): boolean {
    return proto3.util.equals(AccountLikeRequest, a, b);
  }
}

/**
 * @generated from message core.ProductLikesMetadataRequest
 */
export class ProductLikesMetadataRequest extends Message<ProductLikesMetadataRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: repeated string product_ids = 2;
   */
  productIds: string[] = [];

  constructor(data?: PartialMessage<ProductLikesMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.ProductLikesMetadataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "product_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductLikesMetadataRequest {
    return new ProductLikesMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductLikesMetadataRequest {
    return new ProductLikesMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductLikesMetadataRequest {
    return new ProductLikesMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProductLikesMetadataRequest | PlainMessage<ProductLikesMetadataRequest> | undefined, b: ProductLikesMetadataRequest | PlainMessage<ProductLikesMetadataRequest> | undefined): boolean {
    return proto3.util.equals(ProductLikesMetadataRequest, a, b);
  }
}

/**
 * @generated from message core.AccountProductLikesMetadataRequest
 */
export class AccountProductLikesMetadataRequest extends Message<AccountProductLikesMetadataRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: int32 offset = 2;
   */
  offset = 0;

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0;

  constructor(data?: PartialMessage<AccountProductLikesMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.AccountProductLikesMetadataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountProductLikesMetadataRequest {
    return new AccountProductLikesMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountProductLikesMetadataRequest {
    return new AccountProductLikesMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountProductLikesMetadataRequest {
    return new AccountProductLikesMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountProductLikesMetadataRequest | PlainMessage<AccountProductLikesMetadataRequest> | undefined, b: AccountProductLikesMetadataRequest | PlainMessage<AccountProductLikesMetadataRequest> | undefined): boolean {
    return proto3.util.equals(AccountProductLikesMetadataRequest, a, b);
  }
}

/**
 * @generated from message core.ProductLikesMetadataResponse
 */
export class ProductLikesMetadataResponse extends Message<ProductLikesMetadataResponse> {
  /**
   * @generated from field: string product_id = 1;
   */
  productId = "";

  /**
   * @generated from field: int32 total_like_count = 2;
   */
  totalLikeCount = 0;

  /**
   * @generated from field: bool did_account_like = 3;
   */
  didAccountLike = false;

  constructor(data?: PartialMessage<ProductLikesMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.ProductLikesMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_like_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "did_account_like", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductLikesMetadataResponse {
    return new ProductLikesMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductLikesMetadataResponse {
    return new ProductLikesMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductLikesMetadataResponse {
    return new ProductLikesMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProductLikesMetadataResponse | PlainMessage<ProductLikesMetadataResponse> | undefined, b: ProductLikesMetadataResponse | PlainMessage<ProductLikesMetadataResponse> | undefined): boolean {
    return proto3.util.equals(ProductLikesMetadataResponse, a, b);
  }
}

/**
 * @generated from message core.ProductLikesMetadatasResponse
 */
export class ProductLikesMetadatasResponse extends Message<ProductLikesMetadatasResponse> {
  /**
   * @generated from field: repeated core.ProductLikesMetadataResponse metadata = 1;
   */
  metadata: ProductLikesMetadataResponse[] = [];

  constructor(data?: PartialMessage<ProductLikesMetadatasResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.ProductLikesMetadatasResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: ProductLikesMetadataResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductLikesMetadatasResponse {
    return new ProductLikesMetadatasResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductLikesMetadatasResponse {
    return new ProductLikesMetadatasResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductLikesMetadatasResponse {
    return new ProductLikesMetadatasResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProductLikesMetadatasResponse | PlainMessage<ProductLikesMetadatasResponse> | undefined, b: ProductLikesMetadatasResponse | PlainMessage<ProductLikesMetadatasResponse> | undefined): boolean {
    return proto3.util.equals(ProductLikesMetadatasResponse, a, b);
  }
}

/**
 * @generated from message core.ProductLikeRequest
 */
export class ProductLikeRequest extends Message<ProductLikeRequest> {
  /**
   * @generated from field: string product_id = 1;
   */
  productId = "";

  /**
   * @generated from field: string account_id = 2;
   */
  accountId = "";

  constructor(data?: PartialMessage<ProductLikeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.ProductLikeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductLikeRequest {
    return new ProductLikeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductLikeRequest {
    return new ProductLikeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductLikeRequest {
    return new ProductLikeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProductLikeRequest | PlainMessage<ProductLikeRequest> | undefined, b: ProductLikeRequest | PlainMessage<ProductLikeRequest> | undefined): boolean {
    return proto3.util.equals(ProductLikeRequest, a, b);
  }
}

/**
 * @generated from message core.ProductLikeResponse
 */
export class ProductLikeResponse extends Message<ProductLikeResponse> {
  /**
   * @generated from field: string product_id = 1;
   */
  productId = "";

  /**
   * @generated from field: string account_id = 2;
   */
  accountId = "";

  constructor(data?: PartialMessage<ProductLikeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.ProductLikeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductLikeResponse {
    return new ProductLikeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductLikeResponse {
    return new ProductLikeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductLikeResponse {
    return new ProductLikeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProductLikeResponse | PlainMessage<ProductLikeResponse> | undefined, b: ProductLikeResponse | PlainMessage<ProductLikeResponse> | undefined): boolean {
    return proto3.util.equals(ProductLikeResponse, a, b);
  }
}

/**
 * @generated from message core.ProductLikesResponse
 */
export class ProductLikesResponse extends Message<ProductLikesResponse> {
  /**
   * @generated from field: repeated core.ProductLikeResponse likes = 1;
   */
  likes: ProductLikeResponse[] = [];

  constructor(data?: PartialMessage<ProductLikesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.ProductLikesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "likes", kind: "message", T: ProductLikeResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductLikesResponse {
    return new ProductLikesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductLikesResponse {
    return new ProductLikesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductLikesResponse {
    return new ProductLikesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProductLikesResponse | PlainMessage<ProductLikesResponse> | undefined, b: ProductLikesResponse | PlainMessage<ProductLikesResponse> | undefined): boolean {
    return proto3.util.equals(ProductLikesResponse, a, b);
  }
}

/**
 * @generated from message core.ProductLikeCountMetadataResponse
 */
export class ProductLikeCountMetadataResponse extends Message<ProductLikeCountMetadataResponse> {
  /**
   * @generated from field: int32 like_count = 1;
   */
  likeCount = 0;

  constructor(data?: PartialMessage<ProductLikeCountMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.ProductLikeCountMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "like_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductLikeCountMetadataResponse {
    return new ProductLikeCountMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductLikeCountMetadataResponse {
    return new ProductLikeCountMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductLikeCountMetadataResponse {
    return new ProductLikeCountMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProductLikeCountMetadataResponse | PlainMessage<ProductLikeCountMetadataResponse> | undefined, b: ProductLikeCountMetadataResponse | PlainMessage<ProductLikeCountMetadataResponse> | undefined): boolean {
    return proto3.util.equals(ProductLikeCountMetadataResponse, a, b);
  }
}

/**
 * @generated from message core.AccountFollowerRequest
 */
export class AccountFollowerRequest extends Message<AccountFollowerRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: string follower_id = 2;
   */
  followerId = "";

  constructor(data?: PartialMessage<AccountFollowerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.AccountFollowerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "follower_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountFollowerRequest {
    return new AccountFollowerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountFollowerRequest {
    return new AccountFollowerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountFollowerRequest {
    return new AccountFollowerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountFollowerRequest | PlainMessage<AccountFollowerRequest> | undefined, b: AccountFollowerRequest | PlainMessage<AccountFollowerRequest> | undefined): boolean {
    return proto3.util.equals(AccountFollowerRequest, a, b);
  }
}

/**
 * @generated from message core.AccountFollowerRequestsRequest
 */
export class AccountFollowerRequestsRequest extends Message<AccountFollowerRequestsRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: int32 offset = 2;
   */
  offset = 0;

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0;

  constructor(data?: PartialMessage<AccountFollowerRequestsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.AccountFollowerRequestsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountFollowerRequestsRequest {
    return new AccountFollowerRequestsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountFollowerRequestsRequest {
    return new AccountFollowerRequestsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountFollowerRequestsRequest {
    return new AccountFollowerRequestsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountFollowerRequestsRequest | PlainMessage<AccountFollowerRequestsRequest> | undefined, b: AccountFollowerRequestsRequest | PlainMessage<AccountFollowerRequestsRequest> | undefined): boolean {
    return proto3.util.equals(AccountFollowerRequestsRequest, a, b);
  }
}

/**
 * @generated from message core.AccountFollowerResponse
 */
export class AccountFollowerResponse extends Message<AccountFollowerResponse> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: string follower_id = 2;
   */
  followerId = "";

  /**
   * @generated from field: bool is_following = 3;
   */
  isFollowing = false;

  /**
   * @generated from field: bool accepted = 4;
   */
  accepted = false;

  /**
   * @generated from field: string created_at = 5;
   */
  createdAt = "";

  /**
   * @generated from field: string updated_at = 6;
   */
  updatedAt = "";

  constructor(data?: PartialMessage<AccountFollowerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.AccountFollowerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "follower_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "is_following", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "accepted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountFollowerResponse {
    return new AccountFollowerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountFollowerResponse {
    return new AccountFollowerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountFollowerResponse {
    return new AccountFollowerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountFollowerResponse | PlainMessage<AccountFollowerResponse> | undefined, b: AccountFollowerResponse | PlainMessage<AccountFollowerResponse> | undefined): boolean {
    return proto3.util.equals(AccountFollowerResponse, a, b);
  }
}

/**
 * @generated from message core.AccountFollowerCountMetadataResponse
 */
export class AccountFollowerCountMetadataResponse extends Message<AccountFollowerCountMetadataResponse> {
  /**
   * @generated from field: int32 followers_count = 1;
   */
  followersCount = 0;

  /**
   * @generated from field: int32 following_count = 2;
   */
  followingCount = 0;

  constructor(data?: PartialMessage<AccountFollowerCountMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.AccountFollowerCountMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "followers_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "following_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountFollowerCountMetadataResponse {
    return new AccountFollowerCountMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountFollowerCountMetadataResponse {
    return new AccountFollowerCountMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountFollowerCountMetadataResponse {
    return new AccountFollowerCountMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountFollowerCountMetadataResponse | PlainMessage<AccountFollowerCountMetadataResponse> | undefined, b: AccountFollowerCountMetadataResponse | PlainMessage<AccountFollowerCountMetadataResponse> | undefined): boolean {
    return proto3.util.equals(AccountFollowerCountMetadataResponse, a, b);
  }
}

/**
 * @generated from message core.AccountFollowersRequest
 */
export class AccountFollowersRequest extends Message<AccountFollowersRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: repeated string other_account_ids = 2;
   */
  otherAccountIds: string[] = [];

  constructor(data?: PartialMessage<AccountFollowersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.AccountFollowersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "other_account_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountFollowersRequest {
    return new AccountFollowersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountFollowersRequest {
    return new AccountFollowersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountFollowersRequest {
    return new AccountFollowersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountFollowersRequest | PlainMessage<AccountFollowersRequest> | undefined, b: AccountFollowersRequest | PlainMessage<AccountFollowersRequest> | undefined): boolean {
    return proto3.util.equals(AccountFollowersRequest, a, b);
  }
}

/**
 * @generated from message core.AccountFollowersResponse
 */
export class AccountFollowersResponse extends Message<AccountFollowersResponse> {
  /**
   * @generated from field: repeated core.AccountFollowerResponse followers = 1;
   */
  followers: AccountFollowerResponse[] = [];

  constructor(data?: PartialMessage<AccountFollowersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.AccountFollowersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "followers", kind: "message", T: AccountFollowerResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountFollowersResponse {
    return new AccountFollowersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountFollowersResponse {
    return new AccountFollowersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountFollowersResponse {
    return new AccountFollowersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountFollowersResponse | PlainMessage<AccountFollowersResponse> | undefined, b: AccountFollowersResponse | PlainMessage<AccountFollowersResponse> | undefined): boolean {
    return proto3.util.equals(AccountFollowersResponse, a, b);
  }
}

/**
 * @generated from message core.AccountNotificationsRequest
 */
export class AccountNotificationsRequest extends Message<AccountNotificationsRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: int32 offset = 3;
   */
  offset = 0;

  constructor(data?: PartialMessage<AccountNotificationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.AccountNotificationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountNotificationsRequest {
    return new AccountNotificationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountNotificationsRequest {
    return new AccountNotificationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountNotificationsRequest {
    return new AccountNotificationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountNotificationsRequest | PlainMessage<AccountNotificationsRequest> | undefined, b: AccountNotificationsRequest | PlainMessage<AccountNotificationsRequest> | undefined): boolean {
    return proto3.util.equals(AccountNotificationsRequest, a, b);
  }
}

/**
 * @generated from message core.AccountNotificationResponse
 */
export class AccountNotificationResponse extends Message<AccountNotificationResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string created_at = 2;
   */
  createdAt = "";

  /**
   * @generated from field: string event_name = 3;
   */
  eventName = "";

  /**
   * @generated from field: string resource_type = 4;
   */
  resourceType = "";

  /**
   * @generated from field: string resource_id = 5;
   */
  resourceId = "";

  /**
   * @generated from field: string account_id = 6;
   */
  accountId = "";

  /**
   * @generated from field: string data = 7;
   */
  data = "";

  /**
   * @generated from field: bool seen = 8;
   */
  seen = false;

  /**
   * @generated from field: string updated_at = 9;
   */
  updatedAt = "";

  constructor(data?: PartialMessage<AccountNotificationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.AccountNotificationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "event_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "resource_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "seen", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountNotificationResponse {
    return new AccountNotificationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountNotificationResponse {
    return new AccountNotificationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountNotificationResponse {
    return new AccountNotificationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountNotificationResponse | PlainMessage<AccountNotificationResponse> | undefined, b: AccountNotificationResponse | PlainMessage<AccountNotificationResponse> | undefined): boolean {
    return proto3.util.equals(AccountNotificationResponse, a, b);
  }
}

/**
 * @generated from message core.AccountNotificationsResponse
 */
export class AccountNotificationsResponse extends Message<AccountNotificationsResponse> {
  /**
   * @generated from field: repeated core.AccountNotificationResponse notifications = 1;
   */
  notifications: AccountNotificationResponse[] = [];

  constructor(data?: PartialMessage<AccountNotificationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.AccountNotificationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "notifications", kind: "message", T: AccountNotificationResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountNotificationsResponse {
    return new AccountNotificationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountNotificationsResponse {
    return new AccountNotificationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountNotificationsResponse {
    return new AccountNotificationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountNotificationsResponse | PlainMessage<AccountNotificationsResponse> | undefined, b: AccountNotificationsResponse | PlainMessage<AccountNotificationsResponse> | undefined): boolean {
    return proto3.util.equals(AccountNotificationsResponse, a, b);
  }
}

/**
 * @generated from message core.AccountNotificationCountResponse
 */
export class AccountNotificationCountResponse extends Message<AccountNotificationCountResponse> {
  /**
   * @generated from field: int32 count = 1;
   */
  count = 0;

  constructor(data?: PartialMessage<AccountNotificationCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.AccountNotificationCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountNotificationCountResponse {
    return new AccountNotificationCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountNotificationCountResponse {
    return new AccountNotificationCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountNotificationCountResponse {
    return new AccountNotificationCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountNotificationCountResponse | PlainMessage<AccountNotificationCountResponse> | undefined, b: AccountNotificationCountResponse | PlainMessage<AccountNotificationCountResponse> | undefined): boolean {
    return proto3.util.equals(AccountNotificationCountResponse, a, b);
  }
}

/**
 * @generated from message core.DeepLTranslateRequest
 */
export class DeepLTranslateRequest extends Message<DeepLTranslateRequest> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  /**
   * @generated from field: string language_code = 2;
   */
  languageCode = "";

  constructor(data?: PartialMessage<DeepLTranslateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.DeepLTranslateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "language_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeepLTranslateRequest {
    return new DeepLTranslateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeepLTranslateRequest {
    return new DeepLTranslateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeepLTranslateRequest {
    return new DeepLTranslateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeepLTranslateRequest | PlainMessage<DeepLTranslateRequest> | undefined, b: DeepLTranslateRequest | PlainMessage<DeepLTranslateRequest> | undefined): boolean {
    return proto3.util.equals(DeepLTranslateRequest, a, b);
  }
}

/**
 * @generated from message core.DeepLTranslateResponse
 */
export class DeepLTranslateResponse extends Message<DeepLTranslateResponse> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  /**
   * @generated from field: string detected_source_language = 2;
   */
  detectedSourceLanguage = "";

  constructor(data?: PartialMessage<DeepLTranslateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.DeepLTranslateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "detected_source_language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeepLTranslateResponse {
    return new DeepLTranslateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeepLTranslateResponse {
    return new DeepLTranslateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeepLTranslateResponse {
    return new DeepLTranslateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeepLTranslateResponse | PlainMessage<DeepLTranslateResponse> | undefined, b: DeepLTranslateResponse | PlainMessage<DeepLTranslateResponse> | undefined): boolean {
    return proto3.util.equals(DeepLTranslateResponse, a, b);
  }
}

/**
 * @generated from message core.DeepLTranslationsResponse
 */
export class DeepLTranslationsResponse extends Message<DeepLTranslationsResponse> {
  /**
   * @generated from field: repeated core.DeepLTranslateResponse translations = 1;
   */
  translations: DeepLTranslateResponse[] = [];

  constructor(data?: PartialMessage<DeepLTranslationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.DeepLTranslationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "translations", kind: "message", T: DeepLTranslateResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeepLTranslationsResponse {
    return new DeepLTranslationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeepLTranslationsResponse {
    return new DeepLTranslationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeepLTranslationsResponse {
    return new DeepLTranslationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeepLTranslationsResponse | PlainMessage<DeepLTranslationsResponse> | undefined, b: DeepLTranslationsResponse | PlainMessage<DeepLTranslationsResponse> | undefined): boolean {
    return proto3.util.equals(DeepLTranslationsResponse, a, b);
  }
}

