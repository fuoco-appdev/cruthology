// @generated by protoc-gen-es v0.3.0 with parameter "target=ts"
// @generated from file protobuf/interest.proto (package interest, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message interest.CreateInterestRequest
 */
export class CreateInterestRequest extends Message<CreateInterestRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<CreateInterestRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "interest.CreateInterestRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInterestRequest {
    return new CreateInterestRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInterestRequest {
    return new CreateInterestRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInterestRequest {
    return new CreateInterestRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInterestRequest | PlainMessage<CreateInterestRequest> | undefined, b: CreateInterestRequest | PlainMessage<CreateInterestRequest> | undefined): boolean {
    return proto3.util.equals(CreateInterestRequest, a, b);
  }
}

/**
 * @generated from message interest.SearchInterestsRequest
 */
export class SearchInterestsRequest extends Message<SearchInterestsRequest> {
  /**
   * @generated from field: string query = 1;
   */
  query = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: int32 offset = 3;
   */
  offset = 0;

  constructor(data?: PartialMessage<SearchInterestsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "interest.SearchInterestsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchInterestsRequest {
    return new SearchInterestsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchInterestsRequest {
    return new SearchInterestsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchInterestsRequest {
    return new SearchInterestsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SearchInterestsRequest | PlainMessage<SearchInterestsRequest> | undefined, b: SearchInterestsRequest | PlainMessage<SearchInterestsRequest> | undefined): boolean {
    return proto3.util.equals(SearchInterestsRequest, a, b);
  }
}

/**
 * @generated from message interest.InterestResponse
 */
export class InterestResponse extends Message<InterestResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string created_at = 3;
   */
  createdAt = "";

  constructor(data?: PartialMessage<InterestResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "interest.InterestResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InterestResponse {
    return new InterestResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InterestResponse {
    return new InterestResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InterestResponse {
    return new InterestResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InterestResponse | PlainMessage<InterestResponse> | undefined, b: InterestResponse | PlainMessage<InterestResponse> | undefined): boolean {
    return proto3.util.equals(InterestResponse, a, b);
  }
}

/**
 * @generated from message interest.InterestsRequest
 */
export class InterestsRequest extends Message<InterestsRequest> {
  /**
   * @generated from field: repeated string ids = 1;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<InterestsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "interest.InterestsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InterestsRequest {
    return new InterestsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InterestsRequest {
    return new InterestsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InterestsRequest {
    return new InterestsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InterestsRequest | PlainMessage<InterestsRequest> | undefined, b: InterestsRequest | PlainMessage<InterestsRequest> | undefined): boolean {
    return proto3.util.equals(InterestsRequest, a, b);
  }
}

/**
 * @generated from message interest.InterestsResponse
 */
export class InterestsResponse extends Message<InterestsResponse> {
  /**
   * @generated from field: repeated interest.InterestResponse interests = 1;
   */
  interests: InterestResponse[] = [];

  constructor(data?: PartialMessage<InterestsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "interest.InterestsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "interests", kind: "message", T: InterestResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InterestsResponse {
    return new InterestsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InterestsResponse {
    return new InterestsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InterestsResponse {
    return new InterestsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InterestsResponse | PlainMessage<InterestsResponse> | undefined, b: InterestsResponse | PlainMessage<InterestsResponse> | undefined): boolean {
    return proto3.util.equals(InterestsResponse, a, b);
  }
}

