// @generated by protoc-gen-es v0.3.0 with parameter "target=ts"
// @generated from file protobuf/core.proto (package core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum core.BucketType
 */
export enum BucketType {
  /**
   * @generated from enum value: Avatars = 0;
   */
  Avatars = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(BucketType)
proto3.util.setEnumType(BucketType, "core.BucketType", [
  { no: 0, name: "Avatars" },
]);

/**
 * @generated from message core.StockLocations
 */
export class StockLocations extends Message<StockLocations> {
  /**
   * @generated from field: repeated string locations = 1;
   */
  locations: string[] = [];

  constructor(data?: PartialMessage<StockLocations>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.StockLocations";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locations", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockLocations {
    return new StockLocations().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockLocations {
    return new StockLocations().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockLocations {
    return new StockLocations().fromJsonString(jsonString, options);
  }

  static equals(a: StockLocations | PlainMessage<StockLocations> | undefined, b: StockLocations | PlainMessage<StockLocations> | undefined): boolean {
    return proto3.util.equals(StockLocations, a, b);
  }
}

/**
 * @generated from message core.Account
 */
export class Account extends Message<Account> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string supabase_id = 3;
   */
  supabaseId = "";

  /**
   * @generated from field: string profile_url = 4;
   */
  profileUrl = "";

  constructor(data?: PartialMessage<Account>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.Account";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "supabase_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "profile_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Account {
    return new Account().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJsonString(jsonString, options);
  }

  static equals(a: Account | PlainMessage<Account> | undefined, b: Account | PlainMessage<Account> | undefined): boolean {
    return proto3.util.equals(Account, a, b);
  }
}

/**
 * @generated from message core.Accounts
 */
export class Accounts extends Message<Accounts> {
  /**
   * @generated from field: repeated core.Account accounts = 1;
   */
  accounts: Account[] = [];

  constructor(data?: PartialMessage<Accounts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "core.Accounts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: Account, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Accounts {
    return new Accounts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Accounts {
    return new Accounts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Accounts {
    return new Accounts().fromJsonString(jsonString, options);
  }

  static equals(a: Accounts | PlainMessage<Accounts> | undefined, b: Accounts | PlainMessage<Accounts> | undefined): boolean {
    return proto3.util.equals(Accounts, a, b);
  }
}

