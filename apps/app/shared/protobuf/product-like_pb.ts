// @generated by protoc-gen-es v0.3.0 with parameter "target=ts"
// @generated from file protobuf/product-like.proto (package productlike, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message productlike.ProductLikesMetadataRequest
 */
export class ProductLikesMetadataRequest extends Message<ProductLikesMetadataRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: repeated string product_ids = 2;
   */
  productIds: string[] = [];

  constructor(data?: PartialMessage<ProductLikesMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "productlike.ProductLikesMetadataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "product_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductLikesMetadataRequest {
    return new ProductLikesMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductLikesMetadataRequest {
    return new ProductLikesMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductLikesMetadataRequest {
    return new ProductLikesMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProductLikesMetadataRequest | PlainMessage<ProductLikesMetadataRequest> | undefined, b: ProductLikesMetadataRequest | PlainMessage<ProductLikesMetadataRequest> | undefined): boolean {
    return proto3.util.equals(ProductLikesMetadataRequest, a, b);
  }
}

/**
 * @generated from message productlike.AccountProductLikesMetadataRequest
 */
export class AccountProductLikesMetadataRequest extends Message<AccountProductLikesMetadataRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: int32 offset = 2;
   */
  offset = 0;

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0;

  constructor(data?: PartialMessage<AccountProductLikesMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "productlike.AccountProductLikesMetadataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountProductLikesMetadataRequest {
    return new AccountProductLikesMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountProductLikesMetadataRequest {
    return new AccountProductLikesMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountProductLikesMetadataRequest {
    return new AccountProductLikesMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountProductLikesMetadataRequest | PlainMessage<AccountProductLikesMetadataRequest> | undefined, b: AccountProductLikesMetadataRequest | PlainMessage<AccountProductLikesMetadataRequest> | undefined): boolean {
    return proto3.util.equals(AccountProductLikesMetadataRequest, a, b);
  }
}

/**
 * @generated from message productlike.ProductLikesMetadataResponse
 */
export class ProductLikesMetadataResponse extends Message<ProductLikesMetadataResponse> {
  /**
   * @generated from field: string product_id = 1;
   */
  productId = "";

  /**
   * @generated from field: int32 total_like_count = 2;
   */
  totalLikeCount = 0;

  /**
   * @generated from field: bool did_account_like = 3;
   */
  didAccountLike = false;

  constructor(data?: PartialMessage<ProductLikesMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "productlike.ProductLikesMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_like_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "did_account_like", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductLikesMetadataResponse {
    return new ProductLikesMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductLikesMetadataResponse {
    return new ProductLikesMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductLikesMetadataResponse {
    return new ProductLikesMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProductLikesMetadataResponse | PlainMessage<ProductLikesMetadataResponse> | undefined, b: ProductLikesMetadataResponse | PlainMessage<ProductLikesMetadataResponse> | undefined): boolean {
    return proto3.util.equals(ProductLikesMetadataResponse, a, b);
  }
}

/**
 * @generated from message productlike.ProductLikesMetadatasResponse
 */
export class ProductLikesMetadatasResponse extends Message<ProductLikesMetadatasResponse> {
  /**
   * @generated from field: repeated productlike.ProductLikesMetadataResponse metadata = 1;
   */
  metadata: ProductLikesMetadataResponse[] = [];

  constructor(data?: PartialMessage<ProductLikesMetadatasResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "productlike.ProductLikesMetadatasResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: ProductLikesMetadataResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductLikesMetadatasResponse {
    return new ProductLikesMetadatasResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductLikesMetadatasResponse {
    return new ProductLikesMetadatasResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductLikesMetadatasResponse {
    return new ProductLikesMetadatasResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProductLikesMetadatasResponse | PlainMessage<ProductLikesMetadatasResponse> | undefined, b: ProductLikesMetadatasResponse | PlainMessage<ProductLikesMetadatasResponse> | undefined): boolean {
    return proto3.util.equals(ProductLikesMetadatasResponse, a, b);
  }
}

/**
 * @generated from message productlike.ProductLikeRequest
 */
export class ProductLikeRequest extends Message<ProductLikeRequest> {
  /**
   * @generated from field: string product_id = 1;
   */
  productId = "";

  /**
   * @generated from field: string account_id = 2;
   */
  accountId = "";

  constructor(data?: PartialMessage<ProductLikeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "productlike.ProductLikeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductLikeRequest {
    return new ProductLikeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductLikeRequest {
    return new ProductLikeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductLikeRequest {
    return new ProductLikeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProductLikeRequest | PlainMessage<ProductLikeRequest> | undefined, b: ProductLikeRequest | PlainMessage<ProductLikeRequest> | undefined): boolean {
    return proto3.util.equals(ProductLikeRequest, a, b);
  }
}

/**
 * @generated from message productlike.ProductLikeResponse
 */
export class ProductLikeResponse extends Message<ProductLikeResponse> {
  /**
   * @generated from field: string product_id = 1;
   */
  productId = "";

  /**
   * @generated from field: string account_id = 2;
   */
  accountId = "";

  constructor(data?: PartialMessage<ProductLikeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "productlike.ProductLikeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductLikeResponse {
    return new ProductLikeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductLikeResponse {
    return new ProductLikeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductLikeResponse {
    return new ProductLikeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProductLikeResponse | PlainMessage<ProductLikeResponse> | undefined, b: ProductLikeResponse | PlainMessage<ProductLikeResponse> | undefined): boolean {
    return proto3.util.equals(ProductLikeResponse, a, b);
  }
}

/**
 * @generated from message productlike.ProductLikesResponse
 */
export class ProductLikesResponse extends Message<ProductLikesResponse> {
  /**
   * @generated from field: repeated productlike.ProductLikeResponse likes = 1;
   */
  likes: ProductLikeResponse[] = [];

  constructor(data?: PartialMessage<ProductLikesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "productlike.ProductLikesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "likes", kind: "message", T: ProductLikeResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductLikesResponse {
    return new ProductLikesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductLikesResponse {
    return new ProductLikesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductLikesResponse {
    return new ProductLikesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProductLikesResponse | PlainMessage<ProductLikesResponse> | undefined, b: ProductLikesResponse | PlainMessage<ProductLikesResponse> | undefined): boolean {
    return proto3.util.equals(ProductLikesResponse, a, b);
  }
}

/**
 * @generated from message productlike.ProductLikeCountMetadataResponse
 */
export class ProductLikeCountMetadataResponse extends Message<ProductLikeCountMetadataResponse> {
  /**
   * @generated from field: int32 like_count = 1;
   */
  likeCount = 0;

  constructor(data?: PartialMessage<ProductLikeCountMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "productlike.ProductLikeCountMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "like_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductLikeCountMetadataResponse {
    return new ProductLikeCountMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductLikeCountMetadataResponse {
    return new ProductLikeCountMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductLikeCountMetadataResponse {
    return new ProductLikeCountMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProductLikeCountMetadataResponse | PlainMessage<ProductLikeCountMetadataResponse> | undefined, b: ProductLikeCountMetadataResponse | PlainMessage<ProductLikeCountMetadataResponse> | undefined): boolean {
    return proto3.util.equals(ProductLikeCountMetadataResponse, a, b);
  }
}

