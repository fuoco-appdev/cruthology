// @generated by protoc-gen-es v0.3.0 with parameter "target=ts"
// @generated from file protobuf/product.proto (package product, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message product.ProductCountRequest
 */
export class ProductCountRequest extends Message<ProductCountRequest> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  constructor(data?: PartialMessage<ProductCountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "product.ProductCountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductCountRequest {
    return new ProductCountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductCountRequest {
    return new ProductCountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductCountRequest {
    return new ProductCountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProductCountRequest | PlainMessage<ProductCountRequest> | undefined, b: ProductCountRequest | PlainMessage<ProductCountRequest> | undefined): boolean {
    return proto3.util.equals(ProductCountRequest, a, b);
  }
}

/**
 * @generated from message product.ProductCountResponse
 */
export class ProductCountResponse extends Message<ProductCountResponse> {
  /**
   * @generated from field: int32 count = 1;
   */
  count = 0;

  constructor(data?: PartialMessage<ProductCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "product.ProductCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductCountResponse {
    return new ProductCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductCountResponse {
    return new ProductCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductCountResponse {
    return new ProductCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProductCountResponse | PlainMessage<ProductCountResponse> | undefined, b: ProductCountResponse | PlainMessage<ProductCountResponse> | undefined): boolean {
    return proto3.util.equals(ProductCountResponse, a, b);
  }
}

/**
 * @generated from message product.ProductMetadataResponse
 */
export class ProductMetadataResponse extends Message<ProductMetadataResponse> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string subtitle = 2;
   */
  subtitle = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: string thumbnail = 4;
   */
  thumbnail = "";

  /**
   * @generated from field: string type = 5;
   */
  type = "";

  /**
   * @generated from field: string material = 6;
   */
  material = "";

  /**
   * @generated from field: int32 length = 7;
   */
  length = 0;

  /**
   * @generated from field: int32 weight = 8;
   */
  weight = 0;

  /**
   * @generated from field: int32 width = 9;
   */
  width = 0;

  /**
   * @generated from field: int32 height = 10;
   */
  height = 0;

  /**
   * @generated from field: string origin_country = 11;
   */
  originCountry = "";

  /**
   * @generated from field: string metadata = 12;
   */
  metadata = "";

  /**
   * @generated from field: repeated string tags = 13;
   */
  tags: string[] = [];

  /**
   * @generated from field: repeated string options = 14;
   */
  options: string[] = [];

  /**
   * @generated from field: repeated string variant_ids = 15;
   */
  variantIds: string[] = [];

  /**
   * @generated from field: repeated string sales_channel_ids = 16;
   */
  salesChannelIds: string[] = [];

  constructor(data?: PartialMessage<ProductMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "product.ProductMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subtitle", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "thumbnail", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "material", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "length", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "weight", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "width", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "height", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "origin_country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 14, name: "options", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 15, name: "variant_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 16, name: "sales_channel_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductMetadataResponse {
    return new ProductMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductMetadataResponse {
    return new ProductMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductMetadataResponse {
    return new ProductMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProductMetadataResponse | PlainMessage<ProductMetadataResponse> | undefined, b: ProductMetadataResponse | PlainMessage<ProductMetadataResponse> | undefined): boolean {
    return proto3.util.equals(ProductMetadataResponse, a, b);
  }
}

/**
 * @generated from message product.ProductsRequest
 */
export class ProductsRequest extends Message<ProductsRequest> {
  /**
   * @generated from field: repeated string ids = 1;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<ProductsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "product.ProductsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductsRequest {
    return new ProductsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductsRequest {
    return new ProductsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductsRequest {
    return new ProductsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProductsRequest | PlainMessage<ProductsRequest> | undefined, b: ProductsRequest | PlainMessage<ProductsRequest> | undefined): boolean {
    return proto3.util.equals(ProductsRequest, a, b);
  }
}

/**
 * @generated from message product.ProductsResponse
 */
export class ProductsResponse extends Message<ProductsResponse> {
  /**
   * @generated from field: repeated string products = 1;
   */
  products: string[] = [];

  constructor(data?: PartialMessage<ProductsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "product.ProductsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "products", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductsResponse {
    return new ProductsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductsResponse {
    return new ProductsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductsResponse {
    return new ProductsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProductsResponse | PlainMessage<ProductsResponse> | undefined, b: ProductsResponse | PlainMessage<ProductsResponse> | undefined): boolean {
    return proto3.util.equals(ProductsResponse, a, b);
  }
}

