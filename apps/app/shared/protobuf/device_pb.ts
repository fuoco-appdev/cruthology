// @generated by protoc-gen-es v0.3.0 with parameter "target=ts"
// @generated from file protobuf/device.proto (package device, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message device.CreateDeviceRequest
 */
export class CreateDeviceRequest extends Message<CreateDeviceRequest> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: string stock_location_id = 2;
   */
  stockLocationId = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string metadata = 4;
   */
  metadata = "";

  constructor(data?: PartialMessage<CreateDeviceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "device.CreateDeviceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "stock_location_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDeviceRequest {
    return new CreateDeviceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDeviceRequest {
    return new CreateDeviceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDeviceRequest {
    return new CreateDeviceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDeviceRequest | PlainMessage<CreateDeviceRequest> | undefined, b: CreateDeviceRequest | PlainMessage<CreateDeviceRequest> | undefined): boolean {
    return proto3.util.equals(CreateDeviceRequest, a, b);
  }
}

/**
 * @generated from message device.UpdateDeviceRequest
 */
export class UpdateDeviceRequest extends Message<UpdateDeviceRequest> {
  /**
   * @generated from field: string stock_location_id = 1;
   */
  stockLocationId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string metadata = 3;
   */
  metadata = "";

  constructor(data?: PartialMessage<UpdateDeviceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "device.UpdateDeviceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stock_location_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDeviceRequest {
    return new UpdateDeviceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDeviceRequest {
    return new UpdateDeviceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDeviceRequest {
    return new UpdateDeviceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDeviceRequest | PlainMessage<UpdateDeviceRequest> | undefined, b: UpdateDeviceRequest | PlainMessage<UpdateDeviceRequest> | undefined): boolean {
    return proto3.util.equals(UpdateDeviceRequest, a, b);
  }
}

/**
 * @generated from message device.DevicesRequest
 */
export class DevicesRequest extends Message<DevicesRequest> {
  /**
   * @generated from field: string stock_location_id = 1;
   */
  stockLocationId = "";

  constructor(data?: PartialMessage<DevicesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "device.DevicesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stock_location_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DevicesRequest {
    return new DevicesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DevicesRequest {
    return new DevicesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DevicesRequest {
    return new DevicesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DevicesRequest | PlainMessage<DevicesRequest> | undefined, b: DevicesRequest | PlainMessage<DevicesRequest> | undefined): boolean {
    return proto3.util.equals(DevicesRequest, a, b);
  }
}

/**
 * @generated from message device.DeviceResponse
 */
export class DeviceResponse extends Message<DeviceResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string created_at = 2;
   */
  createdAt = "";

  /**
   * @generated from field: string type = 3;
   */
  type = "";

  /**
   * @generated from field: string stock_location_id = 4;
   */
  stockLocationId = "";

  /**
   * @generated from field: string name = 5;
   */
  name = "";

  /**
   * @generated from field: string metadata = 6;
   */
  metadata = "";

  /**
   * @generated from field: string updated_at = 7;
   */
  updatedAt = "";

  constructor(data?: PartialMessage<DeviceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "device.DeviceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "stock_location_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceResponse {
    return new DeviceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceResponse {
    return new DeviceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceResponse {
    return new DeviceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceResponse | PlainMessage<DeviceResponse> | undefined, b: DeviceResponse | PlainMessage<DeviceResponse> | undefined): boolean {
    return proto3.util.equals(DeviceResponse, a, b);
  }
}

/**
 * @generated from message device.DevicesResponse
 */
export class DevicesResponse extends Message<DevicesResponse> {
  /**
   * @generated from field: repeated device.DeviceResponse devices = 1;
   */
  devices: DeviceResponse[] = [];

  constructor(data?: PartialMessage<DevicesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "device.DevicesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "devices", kind: "message", T: DeviceResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DevicesResponse {
    return new DevicesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DevicesResponse {
    return new DevicesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DevicesResponse {
    return new DevicesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DevicesResponse | PlainMessage<DevicesResponse> | undefined, b: DevicesResponse | PlainMessage<DevicesResponse> | undefined): boolean {
    return proto3.util.equals(DevicesResponse, a, b);
  }
}

