// @generated by protoc-gen-es v0.3.0 with parameter "target=ts"
// @generated from file protobuf/stock-location.proto (package stocklocation, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message stocklocation.StockLocationsRequest
 */
export class StockLocationsRequest extends Message<StockLocationsRequest> {
  /**
   * @generated from field: repeated string ids = 1;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<StockLocationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "stocklocation.StockLocationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockLocationsRequest {
    return new StockLocationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockLocationsRequest {
    return new StockLocationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockLocationsRequest {
    return new StockLocationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StockLocationsRequest | PlainMessage<StockLocationsRequest> | undefined, b: StockLocationsRequest | PlainMessage<StockLocationsRequest> | undefined): boolean {
    return proto3.util.equals(StockLocationsRequest, a, b);
  }
}

/**
 * @generated from message stocklocation.StockLocationResponse
 */
export class StockLocationResponse extends Message<StockLocationResponse> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<StockLocationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "stocklocation.StockLocationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockLocationResponse {
    return new StockLocationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockLocationResponse {
    return new StockLocationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockLocationResponse {
    return new StockLocationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StockLocationResponse | PlainMessage<StockLocationResponse> | undefined, b: StockLocationResponse | PlainMessage<StockLocationResponse> | undefined): boolean {
    return proto3.util.equals(StockLocationResponse, a, b);
  }
}

/**
 * @generated from message stocklocation.StockLocationsResponse
 */
export class StockLocationsResponse extends Message<StockLocationsResponse> {
  /**
   * @generated from field: repeated string locations = 1;
   */
  locations: string[] = [];

  constructor(data?: PartialMessage<StockLocationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "stocklocation.StockLocationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locations", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockLocationsResponse {
    return new StockLocationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockLocationsResponse {
    return new StockLocationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockLocationsResponse {
    return new StockLocationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StockLocationsResponse | PlainMessage<StockLocationsResponse> | undefined, b: StockLocationsResponse | PlainMessage<StockLocationsResponse> | undefined): boolean {
    return proto3.util.equals(StockLocationsResponse, a, b);
  }
}

